"use strict";(()=>{var a={};a.id=177,a.ids=[177],a.modules={2334:(a,b,c)=>{c.r(b),c.d(b,{config:()=>m,default:()=>l,handler:()=>o});var d={};c.r(d),c.d(d,{default:()=>i});var e=c(9046),f=c(8667),g=c(3480),h=c(6435);async function i(a,b){if(b.setHeader("Access-Control-Allow-Origin","*"),b.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS"),b.setHeader("Access-Control-Allow-Headers","Content-Type"),"OPTIONS"===a.method)return b.status(200).end();let c={arbitrum_network:{rpc_endpoint:"https://arb1.arbitrum.io/rpc",approved_queries:["gas_price","block_number","network_status"],community_approved:!0,last_reviewed:"2025-07-28",confidence:.85},blockchain_security:{source:"OpenZeppelin Security Advisories",approved_queries:["recent_vulnerabilities","security_updates"],community_approved:!0,last_reviewed:"2025-07-28",confidence:.88},gas_estimation:{source:"Arbitrum Gas Station",approved_queries:["current_gas_prices","network_congestion"],community_approved:!0,last_reviewed:"2025-07-28",confidence:.8}},d=async(a,b)=>{try{switch(a){case"arbitrum_network":return{data:{current_gas_price:"0.1 gwei",block_number:"latest",network_status:"healthy"},confidence:.85,timestamp:new Date().toISOString(),source_verified:!0};case"gas_estimation":return{data:{safe_gas_price:"0.1 gwei",standard_gas_price:"0.15 gwei",fast_gas_price:"0.2 gwei",network_congestion:"low"},confidence:.8,timestamp:new Date().toISOString(),source_verified:!0};default:return null}}catch(a){return{error:"Failed to fetch real-time data",fallback_to_static:!0,confidence:.3}}};class e{constructor(){this.approvedSources=c}async analyzeWithRealtimeData(a){let b=this.identifyRealtimeNeeds(a),c=await Promise.all(b.map(a=>d(a.source,a.query)));return{progressive:await this.generateProgressiveWithRealtime(a,c),conservative:await this.generateConservativeWithRealtime(a,c),community:await this.generateCommunityWithRealtime(a,c),technical:await this.generateTechnicalWithRealtime(a,c)}}identifyRealtimeNeeds(a){let b=[],c=a.toLowerCase();return(c.includes("gas")||c.includes("cost")||c.includes("fee"))&&b.push({source:"gas_estimation",query:"current_gas_prices"}),(c.includes("network")||c.includes("arbitrum")||c.includes("congestion"))&&b.push({source:"arbitrum_network",query:"network_status"}),b}async generateProgressiveWithRealtime(a,b){let c=b.some(a=>a&&!a.error),d=c?b.filter(a=>a&&!a.error):[];return{name:"AI Debater 1 - Progressive Innovation (Real-time Enhanced)",perspective:`Analyzing "${a}" with current network conditions`,analysis:c?`REAL-TIME ANALYSIS: Current network conditions are favorable for implementation. ${this.formatRealtimeInsights(d,"progressive")}`:"Progressive analysis based on static knowledge - real-time conditions unknown",recommendations:c?["Implement during current favorable conditions","Take advantage of low network congestion","Deploy with current gas optimization"]:["Embrace beneficial innovation","Monitor network conditions","Implement when conditions are optimal"],confidence_level:c?.85:.65,realtime_data_status:c?"CURRENT_CONDITIONS_AVAILABLE":"STATIC_KNOWLEDGE_ONLY",data_freshness:c?"LIVE":"STATIC"}}async generateConservativeWithRealtime(a,b){let c=b.some(a=>a&&!a.error),d=c?b.filter(a=>a&&!a.error):[];return{name:"AI Debater 2 - Conservative Stability (Real-time Enhanced)",perspective:`Examining "${a}" with current security conditions`,analysis:c?`CURRENT SECURITY STATUS: ${this.formatRealtimeInsights(d,"conservative")} - Monitor conditions carefully before proceeding.`:"Security analysis based on proven patterns - current conditions should be verified",recommendations:c?["Monitor current network conditions","Wait for optimal security windows","Proceed with current data-informed caution"]:["Verify current conditions","Monitor network status","Proceed only with fresh information"],confidence_level:c?.8:.5,realtime_data_status:c?"CURRENT_CONDITIONS_MONITORED":"REQUIRES_CURRENT_DATA",data_freshness:c?"LIVE":"STATIC"}}async generateCommunityWithRealtime(a,b){let c=b.some(a=>a&&!a.error);return{name:"AI Debater 3 - Appalachian Community Values (Context Enhanced)",perspective:`Viewing "${a}" through community affordability lens`,analysis:c?`COMMUNITY IMPACT ANALYSIS: Current conditions affect our community's ability to participate affordably. ${this.formatCommunityImpact(b)}`:"Community values guide decisions regardless of current conditions - affordability and accessibility remain priorities",recommendations:c?["Consider current costs for community affordability","Time implementation for community benefit","Ensure accessible participation under current conditions"]:["Prioritize community affordability","Ensure inclusive participation","Honor democratic decision-making"],confidence_level:.9,realtime_data_status:c?"COMMUNITY_IMPACT_ASSESSED":"TIMELESS_VALUES_APPLIED",data_freshness:"CULTURAL_KNOWLEDGE_TIMELESS"}}async generateTechnicalWithRealtime(a,b){let c=b.some(a=>a&&!a.error),d=c?b.filter(a=>a&&!a.error):[];return{name:"AI Debater 4 - Technical Efficiency (Real-time Enhanced)",perspective:`Technical assessment of "${a}" with current network metrics`,analysis:c?`CURRENT TECHNICAL CONDITIONS: ${this.formatTechnicalMetrics(d)} - Specific implementation recommendations available.`:"Technical evaluation based on general optimization patterns - current metrics would improve precision",recommendations:c?this.generateTechnicalRecommendations(d):["Optimize for efficiency","Monitor current conditions","Implement with best available data"],confidence_level:c?.85:.6,realtime_data_status:c?"CURRENT_METRICS_AVAILABLE":"REQUIRES_CURRENT_METRICS",data_freshness:c?"LIVE":"STATIC"}}formatRealtimeInsights(a,b){return a.map(a=>`Network conditions: ${JSON.stringify(a.data)}`).join("; ")}formatCommunityImpact(a){let b=a.find(a=>a.data&&a.data.safe_gas_price);return b?`Current gas prices (${b.data.safe_gas_price}) remain affordable for our community`:"Community affordability considerations apply regardless of current conditions"}formatTechnicalMetrics(a){return a.map(a=>Object.entries(a.data).map(([a,b])=>`${a}: ${b}`).join(", ")).join("; ")}generateTechnicalRecommendations(a){let b=[];return a.forEach(a=>{"low"===a.data.network_congestion&&b.push("Deploy during current low congestion period"),a.data.safe_gas_price&&b.push(`Budget ${a.data.safe_gas_price} for safe transactions`)}),b.length>0?b:["Optimize based on current conditions","Monitor network metrics","Implement efficiently"]}}if("GET"===a.method)return b.status(200).json({success:!0,message:"Ms. Jarvis Real-time Enhanced System Online!",realtime_capabilities:{approved_sources:Object.keys(c),community_controlled:!0,selective_integration:"Only community-approved data sources",democratic_oversight:"Regular community review of data sources"},data_sources:c,timestamp:new Date().toISOString()});if("POST"===a.method){let{message:c}=a.body||{};if(!c)return b.status(400).json({success:!1,error:"No message provided"});try{let a=new e,d=await a.analyzeWithRealtimeData(c),f=Object.values(d).some(a=>"LIVE"===a.data_freshness),g=Object.values(d).reduce((a,b)=>a+b.confidence_level,0)/4;return b.status(200).json({success:!0,sender:"Ms. Jarvis",message:f?"I'm pleased to tell you, honey, that I can provide more current information now! My advisors have access to some real-time data from community-approved sources, which makes my guidance more precise and timely.":"I've been thinking about your question, dear. While I don't have current real-time information for this particular topic, I can still provide solid guidance based on my knowledge and proven patterns.",realtime_enhancement:{status:f?"REAL_TIME_DATA_AVAILABLE":"STATIC_KNOWLEDGE",data_sources_used:f?"Community-approved sources":"Static knowledge base",community_controlled:!0},confidence_level:g,verification_status:`${Object.values(d).filter(a=>a.realtime_data_status.includes("AVAILABLE")).length}/4 perspectives have current data`,ai_reasoning:{four_debaters_realtime:d,realtime_integration:f,processing_pipeline:"Four AI Debaters (Selective Real-time) → Judge AI → Mother Persona"},timestamp:new Date().toISOString()})}catch(a){return b.status(500).json({success:!1,error:"Real-time enhanced system error: "+a.message})}}b.status(405).json({error:"Method not allowed"})}var j=c(8112),k=c(8766);let l=(0,h.M)(d,"default"),m=(0,h.M)(d,"config"),n=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/jarvis-realtime-enhanced",pathname:"/api/jarvis-realtime-enhanced",bundlePath:"",filename:""},userland:d,distDir:".next",projectDir:""});async function o(a,b,c){let d=await n.prepare(a,b,{srcPage:"/api/jarvis-realtime-enhanced"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h}=d;try{let c=a.method||"GET",d=(0,j.getTracer)(),e=d.getActiveScopeSpan(),i=n.instrumentationOnRequestError.bind(n),l=async e=>n.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:void 0,multiZoneDraftMode:!0,trustHostHeader:void 0,previewProps:h.preview,propagateError:!1,dev:n.isDev,page:"/api/jarvis-realtime-enhanced",projectDir:"",onError:(...b)=>i(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==k.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await l(e):await d.withPropagatedContext(a.headers,()=>d.trace(k.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:j.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},l))}catch(a){if(n.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")}};var b=require("../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[169],()=>b(b.s=2334));module.exports=c})();